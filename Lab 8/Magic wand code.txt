#define MAX_ACCEPTED_RANGE 2.0f

/* Private variables ------------------------------------------------------- */

static bool debug_nn = false; // Set this to true to see e.g. features generated from the raw signal
static uint32_t run_inference_every_ms = 200;
static rtos::Thread inference_thread(osPriorityLow);
static float buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = { 0 };
static float inference_buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE];

/* Forward declaration */
void run_inference_background();

/**
* @brief Arduino setup function
*/
void setup()
{
// put your setup code here, to run once:
Serial.begin(115200);
// comment out the below line to cancel the wait for USB connection (needed for native USB)
while (!Serial);
Serial.println(&quot;Edge Impulse Inferencing Demo&quot;);

if (!IMU.begin()) {
ei_printf(&quot;Failed to initialize IMU!\r\n&quot;);
}
else {
ei_printf(&quot;IMU initialized\r\n&quot;);
}

if (EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME != 3) {
ei_printf(&quot;ERR: EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME should be equal to 3 (the 3 sensor axes)\n&quot;);
return;
}

inference_thread.start(mbed::callback(&amp;run_inference_background));
}

/**
* @brief Return the sign of the number
*
* @param number
* @return int 1 if positive (or 0) -1 if negative
*/
float ei_get_sign(float number) {
return (number &gt;= 0.0) ? 1.0 : -1.0;
}

/**
* @brief Run inferencing in the background.
*/
void run_inference_background()
{
// wait until we have a full buffer
delay((EI_CLASSIFIER_INTERVAL_MS * EI_CLASSIFIER_RAW_SAMPLE_COUNT) + 100);

// This is a structure that smoothens the output result
// With the default settings 70% of readings should be the same before classifying.
ei_classifier_smooth_t smooth;
ei_classifier_smooth_init(&amp;smooth, 10 /* no. of readings /, 7 / min. readings the same /, 0.8 / min.
confidence /, 0.3 / max anomaly */);

while (1) {
// copy the buffer
memcpy(inference_buffer, buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE * sizeof(float));

// Turn the raw buffer in a signal which we can the classify
signal_t signal;
int err = numpy::signal_from_buffer(inference_buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &amp;signal);
if (err != 0) {
ei_printf(&quot;Failed to create signal from buffer (%d)\n&quot;, err);
return;
}

// Run the classifier
ei_impulse_result_t result = { 0 };

err = run_classifier(&amp;signal, &amp;result, debug_nn);
if (err != EI_IMPULSE_OK) {
ei_printf(&quot;ERR: Failed to run classifier (%d)\n&quot;, err);
return;
}

// print the predictions
ei_printf(&quot;Predictions &quot;);
ei_printf(&quot;(DSP: %d ms., Classification: %d ms., Anomaly: %d ms.)&quot;,
result.timing.dsp, result.timing.classification, result.timing.anomaly);
ei_printf(&quot;: &quot;);

// ei_classifier_smooth_update yields the predicted label
const char *prediction = ei_classifier_smooth_update(&amp;smooth, &amp;result);
ei_printf(&quot;%s &quot;, prediction);
// print the cumulative results
ei_printf(&quot; [ &quot;);
for (size_t ix = 0; ix &lt; smooth.count_size; ix++) {
ei_printf(&quot;%u&quot;, smooth.count[ix]);
if (ix != smooth.count_size + 1) {

ei_printf(&quot;, &quot;);
}
else {
ei_printf(&quot; &quot;);
}
}
ei_printf(&quot;]\n&quot;);
/// custom code
if(prediction==&quot;circular motion&quot;)
{
// RED
digitalWrite(LEDR, LOW);
digitalWrite(LEDG, HIGH);
digitalWrite(LEDB, HIGH);

}
else if(prediction==&quot;idle&quot;)
{
// GREEN
digitalWrite(LEDR, HIGH);
digitalWrite(LEDG, LOW);
digitalWrite(LEDB, HIGH);

}
else if(prediction==&quot;up down&quot;)
{
// BLUE
digitalWrite(LEDR, HIGH);
digitalWrite(LEDG, HIGH);
digitalWrite(LEDB, LOW);

}
else if(prediction==&quot;left right&quot;)
{
// CYAN
digitalWrite(LEDR, HIGH);
digitalWrite(LEDG, LOW);
digitalWrite(LEDB, LOW);

}

delay(run_inference_every_ms);
}

ei_classifier_smooth_free(&amp;smooth);
}

/**
* @brief Get data and run inferencing
*
* @param[in] debug Get debug info if true
*/
void loop()
{
while (1) {
// Determine the next tick (and then sleep later)
uint64_t next_tick = micros() + (EI_CLASSIFIER_INTERVAL_MS * 1000);

// roll the buffer -3 points so we can overwrite the last one
numpy::roll(buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, -3);

// read to the end of the buffer
IMU.readAcceleration(
buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 3],
buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 2],
buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 1]
);

for (int i = 0; i &lt; 3; i++) {
if (fabs(buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 3 + i]) &gt; MAX_ACCEPTED_RANGE) {
buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 3 + i] =
ei_get_sign(buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 3 + i]) * MAX_ACCEPTED_RANGE;
}
}

buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 3] *= CONVERT_G_TO_MS2;
buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 2] *= CONVERT_G_TO_MS2;
buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE - 1] *= CONVERT_G_TO_MS2;

// and wait for next tick
uint64_t time_to_wait = next_tick - micros();
delay((int)floor((float)time_to_wait / 1000.0f));
delayMicroseconds(time_to_wait % 1000);
}
}

#if !defined(EI_CLASSIFIER_SENSOR) || EI_CLASSIFIER_SENSOR != EI_CLASSIFIER_SENSOR_ACCELEROMETER
#error &quot;Invalid model for currentÂ sensor&quot;
#endif